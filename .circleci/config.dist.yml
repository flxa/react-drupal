# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
# Environment variables:
# Most environment variables are set at the org level. You need to explicitly
# set the following per project:
#   - SLACK_WEBHOOK_URL

version: 2

defaults: &defaults
  context: org-global

workflows:
  version: 2
  # When pushed to "master", deploy to "dev".
  # When pushed to "releases", deploy to "staging".
  # Promote deploy from "staging" to "production".
  deploy:
    jobs:
      - deploy_dev:
          <<: *defaults
          filters:
            branches:
              only: master
      - deploy_staging:
          <<: *defaults
          filters:
            branches:
              only: releases
      - approve:
          type: approval
          requires:
            - deploy_staging
      - deploy_prod:
          <<: *defaults
          requires:
            - approve
  # When pushed to a topic branch, run the following in parrallel:
  #  * Run the test suite
  #  * Deploy the temp environment
  test:
    jobs:
      - test:
          <<: *defaults
          filters:
            branches:
              ignore:
                - releases
      - deploy_temp:
          <<: *defaults
          filters:
            branches:
              ignore:
                - master
                - releases
  # Run security patching every Thursday morning.
  patchy:
    jobs:
      - patchy:
          <<: *defaults
    triggers:
      - schedule:
          cron: "0 22 * * 3" # Wed 22:00 UTC
          filters:
            branches:
              only:
                - master

jobs:
  deploy: &deploy
    docker:
      - image: previousnext/pnx-packager
    working_directory: /data
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - deps-{{ arch }}-{{ checksum "composer.lock" }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build and Deploy
          command: |
            VERSION=$(git describe --tags --always)
            echo "Building version: ${VERSION}"
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            skpr package --delete $(pwd) ${VERSION}
            skpr deploy ${SKPR_ENV} ${VERSION}
            notify --channel="#APP_NAME" --username="Skipper" --icon-emoji=":k8s:" --message="Deployed \`${VERSION}\` from \`${CIRCLE_BRANCH}\` to *${SKPR_ENV}*"
            if [[ -v NOTIFY_UPCOMING_APPROVAL ]] ; then notify --channel="#APP_NAME" --username="Skipper" --icon-emoji=":k8s:" --message="Approve deployment of \`${VERSION}\` to *${NOTIFY_UPCOMING_APPROVAL}*: https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" ; fi

  deploy_dev:
    <<: *deploy
    environment:
      - SKPR_ENV: dev

  deploy_staging:
    <<: *deploy
    environment:
      - SKPR_ENV: staging
      - NOTIFY_UPCOMING_APPROVAL: prod

  deploy_prod:
    docker:
      - image: previousnext/pnx-packager
    working_directory: /data
    steps:
      - checkout
      - run:
          name: Build and Deploy
          command: |
            VERSION=$(git describe --tags --always)
            SKPR_ENV=prod
            skpr deploy ${SKPR_ENV} ${VERSION}
            notify --channel="#APP_NAME" --username="Skipper" --icon-emoji=":k8s:" --message="Deployed \`${VERSION}\` from \`${CIRCLE_BRANCH}\` to *${SKPR_ENV}*"

  test:
    docker:
      - image: previousnext/php-apache:7.2-3.x-dev
      - image: previousnext/APP_NAME-db:dev-latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: /data
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ arch }}-{{ checksum "composer.lock" }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Setup: Dependencies"
          command: |
            make init mkdirs
            echo "Node version:" `node -v`
      # This populates our cache for deployments and patching executions.
      - save_cache:
          key: deps-{{ arch }}-{{ checksum "composer.lock" }}-{{ checksum "yarn.lock" }}
          paths:
            - /root/.composer
            - /usr/local/share/.cache/yarn
      - run:
          name: "Test: Lint"
          command: make ci-lint-php lint-sass-js
      - run:
          name: "Build: Styleguide"
          command: make styleguide
      - run:
          name: "Setup: Application"
          command: |
            make updb entity-updates config-import cache-rebuild
            httpd
      - run:
          name: "Test: Application"
          command:  make test-init ci-test
      - store_test_results:
          path: build/logs
      - store_artifacts:
          path: app/sites/simpletest
          destination: tr1

  deploy_temp:
    docker:
      - image: previousnext/php-apache:7.2-3.x-dev
    working_directory: /data
    steps:
      - checkout
      - deploy:
          name: Deploy to PR env
          command: |
            DEPLOY_ID=$(deploy-status create deployment --env m8s --desc "PR environment for ${CIRCLE_BRANCH}")

            M8S_NAME=APP_NAME-${CIRCLE_BRANCH}
            M8S_DOMAIN=${M8S_NAME}.pnxci.io
            m8s build --git-repository=https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git \
                      --git-revision=${CIRCLE_SHA1} \
                      --name=${M8S_NAME} \
                      --domains=${M8S_DOMAIN} \
                      --basic-auth-user='pnx' \
                      --basic-auth-pass='pnx!@#'

            VERSION=$(git rev-parse --short HEAD)
            deploy-status create status --state success --id ${DEPLOY_ID} --auto-inactive --env-url https://${M8S_DOMAIN}/
            notify --channel="#APP_NAME" --message="Deployed \`${VERSION}\` from \`${CIRCLE_BRANCH}\` to *m8s* https://${M8S_DOMAIN}/"

  patchy:
    docker:
      - image: previousnext/php-apache:7.2-3.x-dev
      - image: previousnext/APP_NAME-db:dev-latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: /data
    steps:
      - add-ssh-keys:
          fingerprints:
            - "3c:07:15:32:37:12:93:52:40:89:58:53:23:19:5c:05"
      - checkout
      - restore_cache:
          keys:
            - deps-{{ arch }}-{{ checksum "composer.lock" }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Install dependencies"
          command: make init mkdirs
      - run:
          name: Patchy
          command: |
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            PATCHY_BRANCH=patchy

            git config --global user.email admin@previousnext.com.au
            git config --global user.name Patchy

            git checkout -B $PATCHY_BRANCH
            make patchy
            git push -f origin $PATCHY_BRANCH
            hub pull-request -m "Automated patching" -b master -h $PATCHY_BRANCH || true
